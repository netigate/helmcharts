---
{{- if .Values.vault.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-secret
  namespace: {{ .Values.namespace }}
spec:
  parameters:
    objects: |
      {{- range $key := .Values.vault.secrets }}
      - objectName: "{{ $key }}"
        secretPath: "{{ $.Values.daasProjectName }}/data/{{ $.Values.name }}"
        secretKey: "{{ $key }}"
      {{- end }}
    roleName: {{ .Values.daasProjectName }}
    vaultAddress: "https://vault.infra.{{ .Values.environmentFQDN }}"
  provider: vault
  secretObjects:
  - data:
    {{- range $key := .Values.vault.secrets }}
    - key: {{ $key }}
      objectName: {{ $key }}
    {{- end }}
    secretName: {{ .Values.name }}-secret
    type: Opaque
{{ end }}
---
{{- if .Values.postgres.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-postgres
  namespace: {{ .Values.namespace }}
spec:
  parameters:
    objects: |
      - objectName: "generic-psql-connections-string"
        secretPath: "aiven/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "generic-psql-connections-string"
      - objectName: "psql-connections-string"
        secretPath: "aiven/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "psql-connections-string"
      - objectName: "direct-psql-connections-string"
        secretPath: "aiven/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "direct-psql-connections-string"
      - objectName: "direct-generic-psql-connections-string"
        secretPath: "aiven/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "direct-generic-psql-connections-string"
    roleName: {{ .Values.daasProjectName }}
    vaultAddress: "https://vault.infra.{{ .Values.environmentFQDN }}"
  provider: vault
  secretObjects:
  - data:
    - key: generic-psql-connections-string
      objectName: generic-psql-connections-string
    - key: psql-connections-string
      objectName: psql-connections-string
    - key: direct-psql-connections-string
      objectName: direct-psql-connections-string
    - key: direct-generic-psql-connections-string
      objectName: direct-generic-psql-connections-string
    secretName: {{ .Values.name }}-postgres
    type: Opaque
{{ end }}
---
{{- if .Values.kafka.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-kafka
  namespace: {{ .Values.namespace }}
spec:
  parameters:
    objects: |
      - objectName: "access-cert"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "access-cert"
      - objectName: "access-key"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "access-key"
      - objectName: "ca-cert"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "ca-cert"
      - objectName: "schema-registry-uri"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "schema-registry-uri"
      - objectName: "service-uri"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "service-uri"
      - objectName: "username"
        secretPath: "aiven/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "username"
    roleName: {{ .Values.daasProjectName }}
    vaultAddress: "https://vault.infra.{{ .Values.environmentFQDN }}"
  provider: vault
  secretObjects:
  - data:
    - key: access-cert
      objectName: access-cert
    - key: access-key
      objectName: access-key
    - key: ca-cert
      objectName: ca-cert
    - key: schema-registry-uri
      objectName: schema-registry-uri
    - key: service-uri
      objectName: service-uri
    - key: username
      objectName: username
    secretName: {{ .Values.name }}-kafka
    type: Opaque
{{ end }}
