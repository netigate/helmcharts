{{- if .Values.vault.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-secret
  namespace: {{ .Values.namespace }}
spec:
  provider: vault
  secretObjects:
  - data:
    {{- range .Values.vault.env }}
    - key: {{ .key }}
      objectName: {{ .key }}
    {{- end }}
    secretName: {{ .Values.name }}-secret
    type: Opaque
  parameters:
    vaultAddress: "https://vault.int.{{ .Values.environmentFQDN }}"
    roleName: {{ .Values.name }}
    objects: |
      {{- range .Values.vault.env }}
      - objectName: "{{ .key }}"
        secretPath: "{{ $.Values.vault.team }}/data/{{ $.Values.name }}/config"
        secretKey: "{{ .key }}"
      {{- end }}
{{ end }}
---
{{- if .Values.postgres.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-postgres
  namespace: {{ .Values.namespace }}
spec:
  provider: vault
  secretObjects:
  - data:
    - key: generic-psql-connections-string
      objectName: generic-psql-connections-string
    - key: psql-connections-string
      objectName: psql-connections-string
    secretName: {{ .Values.name }}-postgres
    type: Opaque
  parameters:
    vaultAddress: "https://vault.int.{{ .Values.environmentFQDN }}"
    roleName: {{ .Values.name }}
    objects: |
      - objectName: "generic-psql-connections-string"
        secretPath: "data-credentials/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "generic-psql-connections-string"
      - objectName: "psql-connections-string"
        secretPath: "data-credentials/postgres/{{ $.Values.postgres.databaseServer }}/data/{{ $.Values.postgres.databaseName }}"
        secretKey: "psql-connections-string"
{{ end }}
---
{{- if .Values.kafka.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-kafka
  namespace: {{ .Values.namespace }}
spec:
  provider: vault
  secretObjects:
  - data:
    - key: access-cert
      objectName: access-cert
    - key: access-key
      objectName: access-key
    - key: ca-cert
      objectName: ca-cert
    - key: schema-registry-uri
      objectName: schema-registry-uri
    - key: service-uri
      objectName: service-uri
    - key: username
      objectName: username
    secretName: {{ .Values.name }}-kafka
    type: Opaque
  parameters:
    vaultAddress: "https://vault.int.{{ .Values.environmentFQDN }}"
    roleName: {{ .Values.name }}
    objects: |
      - objectName: "access-cert"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "access-cert"
      - objectName: "access-key"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "access-key"
      - objectName: "ca-cert"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "ca-cert"
      - objectName: "schema-registry-uri"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "schema-registry-uri"
      - objectName: "service-uri"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "service-uri"
      - objectName: "username"
        secretPath: "data-credentials/kafka/{{ $.Values.kafka.cluster }}/data/{{ $.Values.kafka.app }}"
        secretKey: "username"
{{ end }}
---
{{- if .Values.globalKafka.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-globalkafka
  namespace: {{ .Values.namespace }}
spec:
  provider: vault
  secretObjects:
  - data:
    - key: access-cert
      objectName: access-cert
    - key: access-key
      objectName: access-key
    - key: ca-cert
      objectName: ca-cert
    - key: schema-registry-uri
      objectName: schema-registry-uri
    - key: service-uri
      objectName: service-uri
    - key: username
      objectName: username
    secretName: {{ .Values.name }}-globalkafka
    type: Opaque
  parameters:
    vaultAddress: "https://vault.int.{{ .Values.environmentFQDN }}"
    roleName: {{ .Values.name }}
    objects: |
      - objectName: "access-cert"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "access-cert"
      - objectName: "access-key"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "access-key"
      - objectName: "ca-cert"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "ca-cert"
      - objectName: "schema-registry-uri"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "schema-registry-uri"
      - objectName: "service-uri"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "service-uri"
      - objectName: "username"
        secretPath: "data-credentials/global-kafka/{{ $.Values.globalKafka.cluster }}/data/{{ $.Values.globalKafka.app }}"
        secretKey: "username"
{{ end }}
---
{{- if .Values.redis.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.name }}-redis
  namespace: {{ .Values.namespace }}
spec:
  provider: vault
  secretObjects:
  - data:
    - key: redis-connection-string
      objectName: redis-connection-string
    - key: redis-connection-user
      objectName: redis-connection-user
    - key: redis-connection-password
      objectName: redis-connection-password
    - key: redis-connection-host
      objectName: redis-connection-host
    - key: redis-connection-port
      objectName: redis-connection-port
    secretName: {{ .Values.name }}-redis
    type: Opaque
  parameters:
    vaultAddress: "https://vault.int.{{ .Values.environmentFQDN }}"
    roleName: {{ .Values.name }}
    objects: |
      - objectName: "redis-connection-string"
        secretPath: "data-credentials/redis/{{ $.Values.redis.instanceName }}/data/{{ $.Values.redis.userName }}"
        secretKey: "connectionString"
      - objectName: "redis-connection-user"
        secretPath: "data-credentials/redis/{{ $.Values.redis.instanceName }}/data/{{ $.Values.redis.userName }}"
        secretKey: "user"
      - objectName: "redis-connection-password"
        secretPath: "data-credentials/redis/{{ $.Values.redis.instanceName }}/data/{{ $.Values.redis.userName }}"
        secretKey: "password"
      - objectName: "redis-connection-host"
        secretPath: "data-credentials/redis/{{ $.Values.redis.instanceName }}/data/{{ $.Values.redis.userName }}"
        secretKey: "host"
      - objectName: "redis-connection-port"
        secretPath: "data-credentials/redis/{{ $.Values.redis.instanceName }}/data/{{ $.Values.redis.userName }}"
        secretKey: "port"
{{ end }}
---


